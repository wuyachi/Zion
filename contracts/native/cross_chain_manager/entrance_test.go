/*
 * Copyright (C) 2021 The Zion Authors
 * This file is part of The Zion library.
 *
 * The Zion is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Zion is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with The Zion.  If not, see <http://www.gnu.org/licenses/>.
 */

package cross_chain_manager

import (
	"crypto/ecdsa"
	"encoding/hex"
	"encoding/json"
	"math/big"
	"strings"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/contracts/native"
	scom "github.com/ethereum/go-ethereum/contracts/native/cross_chain_manager/common"
	"github.com/ethereum/go-ethereum/contracts/native/go_abi/cross_chain_manager_abi"
	"github.com/ethereum/go-ethereum/contracts/native/go_abi/side_chain_manager_abi"
	"github.com/ethereum/go-ethereum/contracts/native/governance/node_manager"
	"github.com/ethereum/go-ethereum/contracts/native/governance/side_chain_manager"
	"github.com/ethereum/go-ethereum/contracts/native/info_sync"
	"github.com/ethereum/go-ethereum/contracts/native/utils"
	"github.com/ethereum/go-ethereum/core/rawdb"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/rlp"
	"github.com/stretchr/testify/assert"
)

var (
	sdb     *state.StateDB
	signers []common.Address
	keys    []*ecdsa.PrivateKey
)

func init() {
	db := rawdb.NewMemoryDatabase()
	sdb, _ = state.New(common.Hash{}, state.NewDatabase(db), nil)
	signers, keys = native.GenerateTestPeers(2)

	node_manager.InitNodeManager()
	side_chain_manager.InitSideChainManager()
	InitCrossChainManager()
	info_sync.InitInfoSync()

	node_manager.StoreCommunityInfo(sdb, big.NewInt(2000), common.EmptyAddress)
	node_manager.StoreGenesisEpoch(sdb, signers, signers)
	node_manager.StoreGenesisGlobalConfig(sdb)

	param := new(side_chain_manager.RegisterSideChainParam)
	param.BlocksToWait = 4
	param.ChainID = 8
	param.Name = "mychain"

	param1 := new(side_chain_manager.RegisterSideChainParam)
	param1.ChainID = 9
	param1.Name = strings.Repeat("1", 100)
	param1.ExtraInfo = make([]byte, 1000000)
	param1.CCMCAddress = make([]byte, 1000)

	ccd := common.HexToAddress("0xdedace1809079e241234d546e44517f31b57ab8f")
	param2 := new(side_chain_manager.RegisterSideChainParam)
	param2.ChainID = 10
	param2.Router = 15
	param2.Name = "chain10"
	param2.CCMCAddress = ccd.Bytes()

	param3 := new(side_chain_manager.RegisterSideChainParam)
	param3.ChainID = 11
	param3.Router = 15
	param3.Name = strings.Repeat("1", 100)
	param3.ExtraInfo = make([]byte, 1000000)
	param3.CCMCAddress = ccd.Bytes()

	param4 := *param3
	param4.ChainID = 79

	for _, param := range []*side_chain_manager.RegisterSideChainParam{param, param1, param2, param3, &param4} {
		input, err := utils.PackMethodWithStruct(side_chain_manager.ABI, side_chain_manager_abi.MethodRegisterSideChain, param)
		if err != nil {
			panic(err)
		}
		caller := signers[0]
		contractRef := native.NewContractRef(sdb, caller, caller, big.NewInt(1), common.Hash{}, 10000000, nil)
		_, _, err = contractRef.NativeCall(caller, utils.SideChainManagerContractAddress, input)
		if err != nil {
			panic(err)
		}
		p := new(side_chain_manager.ChainIDParam)
		p.ChainID = param.ChainID

		input, err = utils.PackMethodWithStruct(side_chain_manager.ABI, side_chain_manager_abi.MethodApproveRegisterSideChain, p)
		if err != nil {
			panic(err)
		}
		contractRef = native.NewContractRef(sdb, caller, caller, big.NewInt(1), common.Hash{}, 10000000, nil)
		_, _, err = contractRef.NativeCall(caller, utils.SideChainManagerContractAddress, input)
		if err != nil {
			panic(err)
		}
		caller = signers[1]
		contractRef = native.NewContractRef(sdb, caller, caller, big.NewInt(1), common.Hash{}, 10000000, nil)
		_, _, err = contractRef.NativeCall(caller, utils.SideChainManagerContractAddress, input)
		if err != nil {
			panic(err)
		}

		contract := native.NewNativeContract(sdb, contractRef)
		sideChain, err := side_chain_manager.GetSideChainObject(contract, param.ChainID)
		if err != nil {
			panic(err)
		}
		if sideChain == nil {
			panic("side chain not ready yet")
		}
	}
}

func TestImportOuterTransfer(t *testing.T) {

	syncRoot := func(chainID uint64, rootHash common.Hash) {
		data, err := json.Marshal(struct {
			Root common.Hash `json:"stateRoot" gencodec:"required"`
		}{rootHash})
		assert.Nil(t, err)
		data, err = rlp.EncodeToBytes(&info_sync.RootInfo{Height: 12641624, Info: data})
		assert.Nil(t, err)
		param := &info_sync.SyncRootInfoParam{
			ChainID:   chainID,
			RootInfos: [][]byte{data},
		}
		for i := 0; i < 2; i++ {
			digest, err := param.Digest()
			assert.Nil(t, err)
			param.Signature, err = crypto.Sign(digest, keys[i])
			assert.Nil(t, err)

			input, err := utils.PackMethodWithStruct(info_sync.ABI, info_sync.MethodSyncRootInfo, param)
			assert.Nil(t, err)

			blockNumber := big.NewInt(1)
			caller := common.Address{}
			contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, 10000000, nil)
			_, _, err = contractRef.NativeCall(caller, utils.InfoSyncContractAddress, input)
			assert.Nil(t, err)
		}
	}

	event, err := hex.DecodeString("00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000004f00000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000290000000000000000000000000000000000000000000000000000000000000020103f9e71e982c9d4e250e988ce7ed99c220e80c8184a94d1f28f8b23c8b8fe300000000000000000000000000000000000000000000000000000000000000014d4c894eb6829301f23bc2777a532209c7c11f4f50000000000000000000000000000000000000000000000000000000000000000000000000000000000000014f0a8515244b2dc9c7885cc3d83b04d976803c1980000000000000000000000000000000000000000000000000000000000000000000000000000000000000006756e6c6f636b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a147466366d6d303f41a1876c45b1acfbc2b17123e4140c888cca1190940ebc156d4cf13cbf880a83e4a3010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	assert.Nil(t, err)
	proof, err := hex.DecodeString("")
	assert.Nil(t, err)

	param := new(scom.EntranceParam)
	param.SourceChainID = 8
	param.Extra = event

	param1 := new(scom.EntranceParam)
	param1.SourceChainID = 9
	param1.Extra = event

	param2 := new(scom.EntranceParam)
	param2.SourceChainID = 10
	param2.Height = 12641624
	syncRoot(10, common.HexToHash("0bdb33c1f2e4a23a8429c61c1bd31aaccc38795655e3ef9e2baf10f6567bbe3c"))
	param2.Extra = event
	param2.Proof = proof

	param3 := new(scom.EntranceParam)
	param3.SourceChainID = 11
	param3.Height = 12641624
	param3.Extra = event
	assert.Nil(t, err)
	// param3.Proof, err = hex.DecodeString("7b2261646472657373223a22307831316532613731386434366562653937363435623837663233363361666531626632386332363732222c2262616c616e6365223a22307830222c22636f646548617368223a22307830636561363334383038323338373837343332343564373739373966336338636639346338623162396433316133343764643533376466313330613966346265222c226e6f6e6365223a22307831222c2273746f7261676548617368223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030222c226163636f756e7450726f6f66223a5b5d2c2273746f7261676550726f6f66223a5b7b226b6579223a22307831656366633263343264383065613636306330383834633739373065363764616138356265353035363238656236623363616464616563323036316332636163222c2276616c7565223a22307834323037353035336163306137393939323939663835663438653364616233363830323262316361396563313461613433663233656362666664373536666535222c2270726f6f66223a5b5d7d5d7d")
	param3.Proof = proof

	assert.Nil(t, err)
	syncRoot(11, common.HexToHash("0bdb33c1f2e4a23a8429c61c1bd31aaccc38795655e3ef9e2baf10f6567bbe3c"))

	tr := native.NewTimer(scom.MethodImportOuterTransfer)
	for _, param := range []*scom.EntranceParam{param, param1} {
		for i := 0; i < 2; i++ {
			digest, err := param.Digest()
			assert.Nil(t, err)
			param.Signature, err = crypto.Sign(digest, keys[i])
			assert.Nil(t, err)

			input, err := utils.PackMethodWithStruct(scom.ABI, cross_chain_manager_abi.MethodImportOuterTransfer, param)
			assert.Nil(t, err)

			blockNumber := big.NewInt(1)
			extra := uint64(10)
			caller := common.Address{}
			contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, gasTable[cross_chain_manager_abi.MethodImportOuterTransfer]+extra, nil)
			tr.Start()
			ret, leftOverGas, err := contractRef.NativeCall(caller, utils.CrossChainManagerContractAddress, input)
			tr.Stop()
			assert.Nil(t, err)
			result, err := utils.PackOutputs(scom.ABI, cross_chain_manager_abi.MethodImportOuterTransfer, true)
			assert.Nil(t, err)
			assert.Equal(t, ret, result)
			assert.Equal(t, leftOverGas, extra)
		}
	}

	for _, param := range []*scom.EntranceParam{param2, param3} {
		input, err := utils.PackMethodWithStruct(scom.ABI, cross_chain_manager_abi.MethodImportOuterTransfer, param)
		assert.Nil(t, err)

		blockNumber := big.NewInt(1)
		extra := uint64(10)
		caller := common.Address{}
		contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, gasTable[cross_chain_manager_abi.MethodImportOuterTransfer]+extra, nil)
		tr.Start()
		ret, leftOverGas, err := contractRef.NativeCall(caller, utils.CrossChainManagerContractAddress, input)
		tr.Stop()
		assert.Nil(t, err)
		result, err := utils.PackOutputs(scom.ABI, cross_chain_manager_abi.MethodImportOuterTransfer, true)
		assert.Nil(t, err)
		assert.Equal(t, ret, result)
		assert.Equal(t, leftOverGas, extra)
	}
	tr.Dump()
}

func TestReplenish(t *testing.T) {
	param := new(scom.ReplenishParam)
	param.ChainID = 8
	param.TxHashes = []string{"0x74676ce6389bbb479ffc9afe720749ad28b9500ff09c7ae8f19bd1e543f8845f"}

	param1 := new(scom.ReplenishParam)
	param1.ChainID = 9
	for i := 0; i < 200; i++ {
		param1.TxHashes = append(param1.TxHashes, "0x74676ce6389bbb479ffc9afe720749ad28b9500ff09c7ae8f19bd1e543f8845f")
	}

	tr := native.NewTimer(scom.MethodReplenish)
	for _, param := range []*scom.ReplenishParam{param, param1} {
		input, err := utils.PackMethodWithStruct(scom.ABI, cross_chain_manager_abi.MethodReplenish, param)
		assert.Nil(t, err)

		blockNumber := big.NewInt(1)
		extra := uint64(10)
		caller := common.Address{}
		contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, gasTable[cross_chain_manager_abi.MethodReplenish]+extra, nil)
		tr.Start()
		ret, leftOverGas, err := contractRef.NativeCall(caller, utils.CrossChainManagerContractAddress, input)
		tr.Stop()
		assert.Nil(t, err)
		result, err := utils.PackOutputs(scom.ABI, cross_chain_manager_abi.MethodReplenish, true)
		assert.Nil(t, err)
		assert.Equal(t, ret, result)
		assert.Equal(t, leftOverGas, extra)
	}
	tr.Dump()
}

func TestCheckDone(t *testing.T) {
	param := new(scom.CheckDoneParam)
	param.CrossChainID = make([]byte, 32)

	param1 := new(scom.CheckDoneParam)
	param1.CrossChainID = make([]byte, 2000)

	tr := native.NewTimer(scom.MethodCheckDone)
	for _, param := range []*scom.CheckDoneParam{param, param1} {
		input, err := utils.PackMethodWithStruct(scom.ABI, cross_chain_manager_abi.MethodCheckDone, param)
		assert.Nil(t, err)

		blockNumber := big.NewInt(1)
		extra := uint64(10)
		caller := common.Address{}
		contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, gasTable[cross_chain_manager_abi.MethodCheckDone]+extra, nil)
		tr.Start()
		ret, leftOverGas, err := contractRef.NativeCall(caller, utils.CrossChainManagerContractAddress, input)
		tr.Stop()
		assert.Nil(t, err)
		result, err := utils.PackOutputs(scom.ABI, cross_chain_manager_abi.MethodCheckDone, false)
		assert.Nil(t, err)
		assert.Equal(t, ret, result)
		assert.Equal(t, leftOverGas, extra)
	}
	tr.Dump()
}

func TestWhiteChain(t *testing.T) {
	param := new(scom.BlackChainParam)
	param.ChainID = 8

	param1 := new(scom.BlackChainParam)
	param1.ChainID = 9

	tr := native.NewTimer(scom.MethodBlackChain)
	for _, param := range []*scom.BlackChainParam{param, param1} {
		input, err := utils.PackMethodWithStruct(scom.ABI, cross_chain_manager_abi.MethodWhiteChain, param)
		assert.Nil(t, err)

		blockNumber := big.NewInt(1)
		extra := uint64(10)
		caller := signers[0]
		contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, gasTable[cross_chain_manager_abi.MethodWhiteChain]+extra, nil)
		tr.Start()
		ret, leftOverGas, err := contractRef.NativeCall(caller, utils.CrossChainManagerContractAddress, input)
		tr.Stop()
		assert.Nil(t, err)
		result, err := utils.PackOutputs(scom.ABI, cross_chain_manager_abi.MethodWhiteChain, true)
		assert.Nil(t, err)
		assert.Equal(t, ret, result)
		assert.Equal(t, leftOverGas, extra)
	}
	tr.Dump()
}

func TestBlackChain(t *testing.T) {
	param := new(scom.BlackChainParam)
	param.ChainID = 8

	param1 := new(scom.BlackChainParam)
	param1.ChainID = 9

	tr := native.NewTimer(scom.MethodBlackChain)
	for _, param := range []*scom.BlackChainParam{param, param1} {
		input, err := utils.PackMethodWithStruct(scom.ABI, cross_chain_manager_abi.MethodBlackChain, param)
		assert.Nil(t, err)

		blockNumber := big.NewInt(1)
		extra := uint64(10)
		caller := signers[0]
		contractRef := native.NewContractRef(sdb, caller, caller, blockNumber, common.Hash{}, gasTable[cross_chain_manager_abi.MethodBlackChain]+extra, nil)
		tr.Start()
		ret, leftOverGas, err := contractRef.NativeCall(caller, utils.CrossChainManagerContractAddress, input)
		tr.Stop()
		assert.Nil(t, err)
		result, err := utils.PackOutputs(scom.ABI, cross_chain_manager_abi.MethodBlackChain, true)
		assert.Nil(t, err)
		assert.Equal(t, ret, result)
		assert.Equal(t, leftOverGas, extra)
	}
	tr.Dump()
}
